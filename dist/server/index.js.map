{"version":3,"sources":["server/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as WebSocket from \"ws\";\nimport * as api from \"../shared/api\";\n\nconst server = new WebSocket.Server({ port: 8800 });\nserver.on(\"connection\", receiveConnection);\n\ninterface Session {\n\tsendChatMessage(message: api.ChatContent): void;\n}\nconst sessions: Session[] = [];\nconst recentMessages: api.ChatContent[] = new Array(2048);\nlet recentMessagesPointer = 0;\n\nfunction receiveConnection(ws: WebSocket) {\n\tlet username: string;\n\tlet room: string;\n\t\n\tws.on(\"message\", message);\n\tws.on(\"close\", close);\n\tconst session: Session = { sendChatMessage };\n\tsessions.push(session);\n\n\tfunction message(data) {\n\t\ttry {\n\t\t\tconst object = <api.ClientMessage> JSON.parse(data);\n\t\t\tif (typeof object.kind !== \"number\") return;\n\t\t\tswitch (object.kind) {\n\t\t\t\tcase api.MessageKind.FindRooms:\n\t\t\t\t\tfindRooms(<api.FindRooms> object);\n\t\t\t\tcase api.MessageKind.OpenRoom:\n\t\t\t\t\topenRoom(<api.OpenRoom> object);\n\t\t\t\t\tbreak;\n\t\t\t\tcase api.MessageKind.SendMessage:\n\t\t\t\t\tchatMessage(<api.SendMessage> object);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n\tfunction close() {\n\t\tconst index = sessions.indexOf(session);\n\t\tsessions.splice(index, 1);\n\t}\n\tfunction send(data: api.ServerMessage) {\n\t\tws.send(JSON.stringify(data));\n\t}\n\t\n\tfunction sendChatMessage(content: api.ChatContent) {\n\t\tif (content.room === room) {\n\t\t\tsend({\n\t\t\t\tkind: api.MessageKind.ReceiveMessage,\n\t\t\t\tcontent\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction chatMessage(message: api.SendMessage) {\n\t\tif (typeof message.content !== \"string\") return;\n\n\t\tconst content: api.ChatContent = {\n\t\t\troom,\n\t\t\tusername,\n\t\t\tcontent: message.content\n\t\t};\n\n\t\trecentMessages[recentMessagesPointer] = content;\n\t\trecentMessagesPointer++;\n\t\tif (recentMessagesPointer >= recentMessages.length) {\n\t\t\trecentMessagesPointer = 0;\n\t\t}\n\n\t\tfor (const item of sessions) {\n\t\t\tif (session !== item) item.sendChatMessage(content);\n\t\t}\n\t}\n\tfunction openRoom(message: api.OpenRoom) {\n\t\tif (typeof message.username !== \"string\" || typeof message.room !== \"string\") return;\n\t\tusername = message.username;\n\t\troom = message.room;\n\t\tfunction check(item: api.ChatContent) {\n\t\t\tif (!item) return false;\n\t\t\treturn item.room === room;\n\t\t}\n\t\tlet messages = [\n\t\t\t...recentMessages.slice(recentMessagesPointer).filter(check),\n\t\t\t...recentMessages.slice(0, recentMessagesPointer).filter(check)\n\t\t];\n\t\tsend({\n\t\t\tkind: api.MessageKind.RoomContent,\n\t\t\troom,\n\t\t\tmessages\n\t\t});\n\t}\n\tfunction findRooms(message: api.FindRooms) {\n\t\tconst query = message.query;\n\t\tif (typeof query !== \"string\") return;\n\n\t\tconst rooms = recentMessages\n\t\t\t.map(msg => msg.room)\n\t\t\t.filter(room => room.toLowerCase().indexOf(query.toLowerCase()) !== -1)\n\t\t\t.sort();\n\t\tconst completions: string[] = [];\n\t\tlet previous: string = undefined;\n\t\tfor (let room of rooms) {\n\t\t\tif (previous !== room) {\n\t\t\t\tcompletions.push(room);\n\t\t\t\tprevious = room;\n\t\t\t}\n\t\t}\n\t\tsend({\n\t\t\tkind: api.MessageKind.RoomCompletions,\n\t\t\tcompletions\n\t\t});\n\t}\n}\n"]}